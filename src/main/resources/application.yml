server:
  port: 7000
  servlet:
    context-path: /kafka


spring:
  kafka:
    # 以逗号分隔的地址列表，用于建立与kafka集群的初始连接（kafka默认的端口号为9092）
    bootstrap-servers:

    #配置生产者
    producer:
      # 发生错误后，消息重发的次数
      retries: 0
      # 当有多个消息需要被发送到同一分区时，生产者会把他们放在同一批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算
      batch-size: 16384
      # 设置生产者内存缓冲区大小
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0  生产者在成功写入消息之前不会等待任何来自服务器的响应
      # acks=1  只要集群的首领节点收到消息，生产者就会收到一个来自服务器的成功响应
      # acks=all  只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应
      acks: 1

    #配置消费者
    consumer:
      # 自动提交的时间间隔  在springboot 2.X版本中采用的是值的类型为Duration 需要符合特定的格式 ，如1S，1M，2H，5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该如何处理
      # latest (默认值)在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动后生成的数据）
      # earliest 在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: yj

    listener:
      # 在侦听器容器中运行的线程数
      concurrency: 5
      # listener负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
